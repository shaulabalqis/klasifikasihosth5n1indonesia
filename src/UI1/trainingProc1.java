/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UI1;

import fungsi1.training1;
import java.text.DecimalFormat;
import javax.swing.SwingUtilities;

/**
 *
 * @author Shaula Balqis Z
 */
public class trainingProc1 extends javax.swing.JFrame {
    public static String detail;
    public static boolean klikStop;

    /**
     * Creates new form trainingProc
     */
    
    //static fungsi.training t=new fungsi.training();
    public trainingProc1() {
        initComponents();
        
    }
    //public static boolean cekError=true;
    public static void update (int epoch, double[] error) {
      String ep=Integer.toString(epoch);String temp1="";
      String[] er= new String[4];
      DecimalFormat df=new DecimalFormat("0.00000000");
      for (int m=0; m<error.length; m++){
          er[m]=df.format(error[m]);
      }
      trainingProc1.epoch.setText(ep);
      //System.out.println(ep);
      detail=detail+"\n"+er[0];
      String temp=er[0];
      for (int m=1; m<error.length; m++){
          temp=temp+"\t"+er[m];
          detail=detail+"\t"+er[m];
      }
      temp=temp+"\n Rata-rata : "+fungsi1.init1.eTotalRata2;
      temp1=temp1+fungsi1.training1.s.getElapsedTimeSecs()+" detik";
      trainingProc1.Time.setText(temp1);
      trainingProc1.detailProc.setText(detail);
      trainingProc1.error.setText(temp);
    }
    public static void updating(){
        (new Thread()
        {
        @Override
        public void run(){
            try{
               SwingUtilities.invokeLater(new Runnable(){ 
                    @Override
                    public void run(){    
                      update(training1.epoch,fungsi1.init1.eTotal);
                    }
                });
             }
            catch (Exception e){
                System.out.println (e);
                // handle error
             }
        }
        }).start();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelEpoch = new javax.swing.JLabel();
        labelError = new javax.swing.JLabel();
        epoch = new javax.swing.JTextField();
        OK = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailProc = new javax.swing.JTextArea();
        dataTest = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        error = new javax.swing.JTextArea();
        labelMinError = new javax.swing.JLabel();
        minError = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        uji = new javax.swing.JButton();
        detailTraining = new javax.swing.JLabel();
        detailUji = new javax.swing.JLabel();
        targetTrue = new javax.swing.JRadioButton();
        targetFalse = new javax.swing.JRadioButton();
        targetUnknown = new javax.swing.JRadioButton();
        labelTarget = new javax.swing.JLabel();
        labelTime = new javax.swing.JLabel();
        Time = new javax.swing.JTextField();
        labelAlpha = new javax.swing.JLabel();
        labelHiddenNeuron2 = new javax.swing.JLabel();
        hiddenNeuron1 = new javax.swing.JTextField();
        alpha = new javax.swing.JTextField();
        labelHiddenNeuron1 = new javax.swing.JLabel();
        hiddenNeuron2 = new javax.swing.JTextField();
        testInputSeq = new javax.swing.JRadioButton();
        testDataDefault = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pelatihan dan Pengujian");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        labelEpoch.setText("Epoch ");

        labelError.setText("Rata-rata kesalahan ");

        epoch.setEditable(false);

        OK.setText("Selesai");
        OK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OKMouseClicked(evt);
            }
        });

        detailProc.setColumns(20);
        detailProc.setRows(5);
        jScrollPane1.setViewportView(detailProc);

        dataTest.setEnabled(false);
        dataTest.setMaximumSize(new java.awt.Dimension(480, 20));
        dataTest.setMinimumSize(new java.awt.Dimension(480, 20));

        error.setColumns(20);
        error.setRows(5);
        jScrollPane2.setViewportView(error);

        labelMinError.setText("Toleransi Kesalahan");

        minError.setEditable(false);

        uji.setText("Mulai pengujian");
        uji.setEnabled(false);
        uji.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ujiMouseClicked(evt);
            }
        });

        detailTraining.setText("detailTraining");

        detailUji.setText("detailUji");

        targetTrue.setText("Host Manusia");
        targetTrue.setEnabled(false);
        targetTrue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                targetTrueMouseClicked(evt);
            }
        });

        targetFalse.setText("Host Bukan Manusia");
        targetFalse.setEnabled(false);
        targetFalse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                targetFalseMouseClicked(evt);
            }
        });

        targetUnknown.setText("Belum diketahui");
        targetUnknown.setEnabled(false);
        targetUnknown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                targetUnknownMouseClicked(evt);
            }
        });

        labelTarget.setText("Target");
        labelTarget.setEnabled(false);

        labelTime.setText("Waktu");

        Time.setEditable(false);

        labelAlpha.setText("Laju Pembelajaran");

        labelHiddenNeuron2.setText("Neuron Lapisan Tersembunyi  2");

        hiddenNeuron1.setEditable(false);

        alpha.setEditable(false);

        labelHiddenNeuron1.setText("Neuron Lapisan Tersembunyi 1");

        hiddenNeuron2.setEditable(false);

        testInputSeq.setText("Uji data dengan memasukkan deret yang ingin diuji ke dalam kotak dibawah.");
        testInputSeq.setEnabled(false);
        testInputSeq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testInputSeqMouseClicked(evt);
            }
        });

        testDataDefault.setText("Uji data yang sudah tersedia");
        testDataDefault.setEnabled(false);
        testDataDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testDataDefaultMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(testInputSeq, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(labelTarget)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(targetTrue, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(targetFalse, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(targetUnknown, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(dataTest, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(detailUji)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(uji, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelMinError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelEpoch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(minError, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(Time)
                                    .addComponent(epoch))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelHiddenNeuron2)
                                    .addComponent(labelAlpha)
                                    .addComponent(labelHiddenNeuron1))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(hiddenNeuron2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(hiddenNeuron1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(alpha)))
                            .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelError, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(detailTraining)
                            .addComponent(testDataDefault)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelEpoch)
                                    .addComponent(epoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hiddenNeuron1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelTime, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelHiddenNeuron2)
                                    .addComponent(hiddenNeuron2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelMinError)
                                    .addComponent(minError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelAlpha)
                                    .addComponent(alpha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(labelHiddenNeuron1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(labelError)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailTraining)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(testDataDefault)
                        .addGap(18, 18, 18)
                        .addComponent(testInputSeq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataTest, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTarget)
                            .addComponent(targetTrue)
                            .addComponent(targetFalse)
                            .addComponent(targetUnknown))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(detailUji)
                            .addComponent(uji, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(OK)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OKMouseClicked
        fungsi1.training1.thread.stop();
        //fungsi1.training1.thread.interrupt();
        klikStop=true;
        fungsi1.init1.emptying();
        //skripsi1.skripsi1.prim.setEnabled(true);
        skripsi1.skripsi1.prim.setFocusableWindowState(true);
        skripsi1.skripsi1.prim.viewTrainingPattern.setEnabled(true);
        skripsi1.skripsi1.prim.editDataTraining.setEnabled(true);
        skripsi1.skripsi1.prim.ubahParameter.setEnabled(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_OKMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        detail="Rata-rata kesalahan :\n";
        training1.start();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void ujiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ujiMouseClicked
      if(testInputSeq.isSelected()==true&&uji.isEnabled()==true){  
        if (dataTest.getText().equals("")){
            detailUji.setText("Deret yang akan diuji tidak boleh kosong.");
            detailUji.setVisible(true);
        }
        else{
            String dataStringTemp=dataTest.getText();String dataTest="";
            char [] dataCharTemp= dataStringTemp.toCharArray();
            boolean cekData=true; int k=0;
            while (cekData==true&&k<dataCharTemp.length){
                detailUji.setText("Mohon tunggu ...");
                detailUji.setVisible(true);
                if (((dataCharTemp[k]=='A')||(dataCharTemp[k]=='a'))||((dataCharTemp[k]=='T')||(dataCharTemp[k]=='t'))||((dataCharTemp[k]=='G')||(dataCharTemp[k]=='g'))||((dataCharTemp[k]=='C')||(dataCharTemp[k]=='c'))||((dataCharTemp[k]=='S')||(dataCharTemp[k]=='s'))){
                    dataTest=dataTest+dataCharTemp[k];
                    k++;
                }
                else if (dataCharTemp[k]!=' '){
                    cekData=false;
                    detailUji.setText("Deret yang dimasukkan salah. Cek apakah terdapat kesalahan penulisan.");
                }
                else{
                    k++;
                }
            }
            //System.out.println("cek selesai");
            if (targetTrue.isSelected()==true){
                double[][] target={{1,1,1,1},{-1,-1,-1,-1}};
                fungsi1.testInputSeq1.targetTestValue=target;
                fungsi1.sigmoidNormalization1.startInputTarget(fungsi1.testInputSeq1.targetTestValue);
                fungsi1.testInputSeq1.cekError=true;
            }
            else if (targetFalse.isSelected()==true){
                double[][] target={{-1,-1,-1,-1},{1,1,1,1}};
                fungsi1.testInputSeq1.targetTestValue=target;
                fungsi1.sigmoidNormalization1.startInputTarget(fungsi1.testInputSeq1.targetTestValue);
                fungsi1.testInputSeq1.cekError=true;
            }
            else if (targetUnknown.isSelected()==true){
                fungsi1.testInputSeq1.cekError=false;
            }
            else{
                fungsi1.testInputSeq1.cekError=false;
                detailUji.setText("Mohon isi target data sesuai dengan kondisi");
            }
            //System.out.println(dataTest+"\n");
            if (cekData==true&&(fungsi1.testInputSeq1.cekError==true||targetUnknown.isSelected()==true)){
                System.out.println("\n\n__________TEST__________\n");
                System.out.println(dataTest);
                fungsi1.testInputSeq1.start(dataTest);
                detailUji.setText("");
            }
        }
      }
      
      else if(testDataDefault.isSelected()==true&&uji.isEnabled()==true){
          System.out.println("\n\n__________TEST__________\n");
          fungsi1.testDataDefault1.start();
      }
      
// TODO add your handling code here:
    }//GEN-LAST:event_ujiMouseClicked

    private void targetTrueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_targetTrueMouseClicked
        detailUji.setText("");
        //targetTrue.setSelected(true);
        targetFalse.setSelected(false);
        targetUnknown.setSelected(false);
    // TODO add your handling code here:
    }//GEN-LAST:event_targetTrueMouseClicked

    private void targetFalseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_targetFalseMouseClicked
        detailUji.setText("");
        //targetFalse.setSelected(true);
        targetTrue.setSelected(false);
        targetUnknown.setSelected(false);// TODO add your handling code here:
    }//GEN-LAST:event_targetFalseMouseClicked

    private void targetUnknownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_targetUnknownMouseClicked
        detailUji.setText("");
        //targetUnknown.setSelected(true);
        targetFalse.setSelected(false);
        targetTrue.setSelected(false);// TODO add your handling code here:
    }//GEN-LAST:event_targetUnknownMouseClicked

    private void testDataDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testDataDefaultMouseClicked
        if (testDataDefault.isEnabled()==true){
            if (testDataDefault.isSelected()==true){
                testInputSeq.setSelected(false);
                labelTarget.setEnabled(testInputSeq.isSelected());
                targetTrue.setEnabled(testInputSeq.isSelected());
                targetFalse.setEnabled(testInputSeq.isSelected());
                targetUnknown.setEnabled(testInputSeq.isSelected());
                uji.setEnabled(true);
            }
            else
                uji.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_testDataDefaultMouseClicked

    private void testInputSeqMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testInputSeqMouseClicked
        if (testInputSeq.isEnabled()==true){
            if (testInputSeq.isSelected()==true){
                testDataDefault.setSelected(false);
                labelTarget.setEnabled(testInputSeq.isSelected());
                targetTrue.setEnabled(testInputSeq.isSelected());
                targetFalse.setEnabled(testInputSeq.isSelected());
                targetUnknown.setEnabled(testInputSeq.isSelected());
                uji.setEnabled(true);
            }
            else{
                labelTarget.setEnabled(testInputSeq.isSelected());
                targetTrue.setEnabled(testInputSeq.isSelected());
                targetFalse.setEnabled(testInputSeq.isSelected());
                targetUnknown.setEnabled(testInputSeq.isSelected());
                uji.setEnabled(false);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_testInputSeqMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(trainingProc1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(trainingProc1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(trainingProc1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(trainingProc1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new trainingProc1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton OK;
    public static javax.swing.JTextField Time;
    public static javax.swing.JTextField alpha;
    public static javax.swing.JTextField dataTest;
    public static javax.swing.JTextArea detailProc;
    public static javax.swing.JLabel detailTraining;
    public static javax.swing.JLabel detailUji;
    public static javax.swing.JTextField epoch;
    public static javax.swing.JTextArea error;
    public static javax.swing.JTextField hiddenNeuron1;
    public static javax.swing.JTextField hiddenNeuron2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelAlpha;
    private javax.swing.JLabel labelEpoch;
    private javax.swing.JLabel labelError;
    private javax.swing.JLabel labelHiddenNeuron1;
    private javax.swing.JLabel labelHiddenNeuron2;
    private javax.swing.JLabel labelMinError;
    public static javax.swing.JLabel labelTarget;
    private javax.swing.JLabel labelTime;
    public static javax.swing.JTextField minError;
    public static javax.swing.JRadioButton targetFalse;
    public static javax.swing.JRadioButton targetTrue;
    public static javax.swing.JRadioButton targetUnknown;
    public static javax.swing.JRadioButton testDataDefault;
    public static javax.swing.JRadioButton testInputSeq;
    public static javax.swing.JButton uji;
    // End of variables declaration//GEN-END:variables
}
